// =========================
// src/features/auth/LoginPage.jsx
// =========================
import { useState } from "react";
import { useNavigate, useLocation } from "react-router-dom";
import { useForm } from "react-hook-form";
import { useDispatch } from "react-redux";
import { FiMail, FiLock, FiEye, FiEyeOff } from "react-icons/fi";

import API_BASE_URL from "../../../config/api";
import Button from "../../components/ui/Button";
import loginbg from "../../assets/loginbg.png";

import { setCredentials } from "../../redux/authSlice";
import { ROLES } from "../../lib/roles";
import { shapeUserFromBackend } from "./shapeUser";

function LoginPage() {
  const [showPass, setShowPass] = useState(false);
  const [error, setError] = useState("");
  const [loading, setLoading] = useState(false);

  const navigate = useNavigate();
  const location = useLocation();
  const dispatch = useDispatch();

  const from = location.state?.from?.pathname;

  const {
    register,
    handleSubmit,
    formState: { errors, isValid },
  } = useForm({ mode: "onChange" });

  const onSubmit = async ({ email, password }) => {
    setLoading(true);
    setError("");

    try {
      const response = await fetch(`${API_BASE_URL}/en/login/`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ email, password }),
      });

      let data;
      try {
        data = await response.json();
      } catch {
        data = null;
      }

      if (!response.ok) {
        throw new Error(
          data?.detail || data?.message || "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å"
        );
      }
      if (!data?.access || !data?.refresh || !data?.user) {
        throw new Error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞");
      }

      // üëá –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–¥ —Ñ—Ä–æ–Ω—Ç
      const shaped = shapeUserFromBackend(data.user);

      dispatch(
        setCredentials({
          user: shaped,
          access: data.access,
          refresh: data.refresh,
        })
      );

      // —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –∫–æ–¥–æ–º, –∫–æ—Ç–æ—Ä—ã–π —á–∏—Ç–∞–µ—Ç –Ω–∞–ø—Ä—è–º—É—é –∏–∑ localStorage
      if (shaped?.id != null) localStorage.setItem("id", String(shaped.id));
      if (shaped?.role) localStorage.setItem("role", shaped.role);
      if (shaped?.doctorId)
        localStorage.setItem("doctorId", String(shaped.doctorId));

      const fallback =
        shaped?.role === ROLES.DOCTOR ? "/calendar" : "/patients";
      navigate(from || fallback, { replace: true });
    } catch (err) {
      setError(err?.message || "–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ email –∏ –ø–∞—Ä–æ–ª—å.");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="flex h-screen">
      {/* –õ–µ–≤–∞—è —á–∞—Å—Ç—å */}
      <div className="w-[45%] relative">
        <img
          src={loginbg}
          alt="login background"
          className="w-full h-full object-cover"
        />
        <div className="absolute inset-0 flex flex-col items-center justify-center text-white text-center px-8">
          <h1 className="text-4xl md:text-5xl font-bold mb-6">
            –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!
          </h1>
          <p className="text-lg md:text-xl mb-8">
            –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É, —á—Ç–æ–±—ã —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–ø–∏—Å—è–º–∏, –ø–∞—Ü–∏–µ–Ω—Ç–∞–º–∏ –∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏
            –∫–ª–∏–Ω–∏–∫–∏.
          </p>
        </div>
      </div>

      <div style={{ width: "40px" }} />

      {/* –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å */}
      <div className="w-[45%] flex items-center justify-center">
        <form
          onSubmit={handleSubmit(onSubmit)}
          className="w-[40vw] max-w-[700px] p-8"
        >
          <h2 className="text-4xl font-bold mb-10 text-center">
            –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É
          </h2>

          {/* Email */}
          <div className="mb-6">
            <label className="block mb-2 font-medium text-gray-600">
              Email
            </label>
            <div className="relative">
              <FiMail className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400" />
              <input
                type="email"
                placeholder="–í–≤–µ–¥–∏—Ç–µ email"
                className={`w-full pl-10 pr-4 py-3 border rounded-lg focus:outline-none transition ${
                  errors.email ? "border-red-500" : "border-gray-300"
                }`}
                {...register("email", {
                  required: "Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω",
                  pattern: {
                    value: /^\S+@\S+\.\S+$/,
                    message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email",
                  },
                })}
              />
            </div>
            {errors.email && (
              <p className="text-red-500 text-sm mt-1">
                {errors.email.message}
              </p>
            )}
          </div>

          {/* –ü–∞—Ä–æ–ª—å */}
          <div className="mb-8">
            <label className="block mb-2 font-medium text-gray-600">
              –ü–∞—Ä–æ–ª—å
            </label>
            <div className="relative">
              <FiLock className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400" />
              <input
                type={showPass ? "text" : "password"}
                placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
                className={`w-full pl-10 pr-4 py-3 border rounded-lg focus:outline-none transition ${
                  errors.password ? "border-red-500" : "border-gray-300"
                }`}
                {...register("password", {
                  required: "–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω",
                  minLength: { value: 5, message: "–ú–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤" },
                })}
              />
              <button
                type="button"
                className="absolute right-3 top-1/2 -translate-y-1/2 text-gray-500 hover:text-gray-700"
                onClick={() => setShowPass((p) => !p)}
              >
                {showPass ? <FiEyeOff size={20} /> : <FiEye size={20} />}
              </button>
            </div>
            {errors.password && (
              <p className="text-red-500 text-sm mt-1">
                {errors.password.message}
              </p>
            )}
          </div>

          {/* –û—à–∏–±–∫–∞ */}
          {error && (
            <p className="text-red-500 text-center mb-6 text-sm">{error}</p>
          )}

          <p
            onClick={() => navigate("/resetPassword")}
            className="text-blue-500 text-center mb-6 text-1xl cursor-pointer"
          >
            –ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å!
          </p>

          <Button
            type="submit"
            variant="primary"
            disabled={!isValid || loading}
            className="w-full py-3 text-lg rounded-lg"
            isLoading={loading}
          >
            {loading ? "–í—Ö–æ–¥..." : "–í–æ–π—Ç–∏"}
          </Button>
        </form>
      </div>
    </div>
  );
}

export default LoginPage;
